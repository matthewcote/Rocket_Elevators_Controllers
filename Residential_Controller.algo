DEFINE Column USING floor_num AND elevator_num 
    elevator_list: SET TO EMPTY List,
    call_button_list: SET TO EMPTY List,
    call_wait_list: SET TO EMPTY List,
    floor_num: floor_num,
    elevator_num: elevator_num

        SEQUENCE fill_elevator_list 
            SET num TO 1
            WHILE num is less than or equal TO elevator_num 
                SET elevator TO INSTANTIATE Elevator WITH num
                PUSH elevator to elevator_list 
                INCREMENT num
            ENDWHILE
        ENDSEQUENCE

        SEQUENCE fill_call_button_list USING floor_num
            SET floor TO 1
            WHILE floor is less than or equal TO floor_num
                IF floor is not equal TO 1 'if it is not the bottom floor, add a down button'
                    SET direction of call_button to "DOWN"
                    SET call_button TO INSTANTIATE Call_Button USING floor AND direction
                    PUSH call_button to call_button_list OF column
                ENDIF
                IF floor is not equal TO floor_num OF column 'if it is not the top floor, add a down button'
                    SET direction of call_button to "UP"
                    SET call_button TO INSTANTIATE Call_Button USING floor AND direction
                    PUSH call_button to call_button_list OF column
                ENDIF
                INCREMENT floor
            ENDWHILE
        ENDSEQUENCE
ENDDEFINE

DEFINE Elevator USING num 
    name: num,
    status: "IDLE", 'ELEVATOR can be IDLE, UP or DOWN'
    current_floor: 1,
    door_status: "CLOSED",
    request_button_list: SET TO EMPTY List,
    floor_list: SET TO EMPTY List 
    
    SET floor TO 1
    WHILE floor is less than or equal to column floor_num
        SET request_button TO INSTANTIATE Request_Button WITH floor
        PUSH request_button TO request_button_list
        INCREMENT floor
    ENDWHILE

    SEQUENCE open_door
        SET door_status TO "OPEN"
    ENDSEQUENCE

    SEQUENCE close_door 
        SET door_status TO "CLOSED"
    ENDSEQUENCE

    SEQUENCE push_floor_list USING floor 'adds floor to elevator's floor_list and calls move on that elevator
        push floor TO floor_list 
        CALL move 
    END SEQUENCE

    SEQUENCE move  'recursive sequence - while there is a list '
        SET direction TO "NULL"
        FOR EACH floor IN floor_list  'while there are target floors in our floor list'
            IF floor IS EQUAL TO current_floor
                REMOVE floor FROM floor_list
                CALL stop OF elevator
            ELSE 'determine direction'
                IF direction IS EQUAL TO "NULL" AND floor IS LESS THAN current_floor
                    SET direction TO "DOWN"
                    SET status TO direction
                    INCREMENT current_floor by negative 1 'TODO turn that into a function - maybe takes time'
                    CALL elevator move 
                ENDIF
                IF direction IS EQUAL TO "NULL" AND floor IS MORE THAN current_floor
                    SET direction to "UP"
                    SET status TO direction
                    INCREMENT current_floor TO elevator by 1 'TODO turn that into a function - maybe takes time'
                    CALL elevator move
                ENDIF
            ENDIF
        ENDFOR
        SET status to "IDLE"
    ENDSEQUENCE

    SEQUENCE stop 
        'method called because current floor of elevator is on the floor_list of that elevator - need to stop and open door wait, close door, '
        
        CALL open_door OF elevator
        CALL wait OF elevator

        IF floor_list OF elevator IS EMPTY
            'check call_list of column'
            IF call_list OF column is EMPTY
                SET status OF elevator TO "IDLE"
            ELSE
                FOR EACH floor OF call_list OF column
                    PUSH floor OF call_list OF column TO floor_list OF elevator
                ENDFOR
            CALL move OF elevator
        ELSE
            CALL move OF elevator
        ENDIF

    ENDSEQUENCE

    SEQUENCE wait 'USING x
        'TODO - can add a wait variable to be set when initializing column or change to like 3 seconds'
        WAIT x seconds
        CALL close_door OF elevator
    ENDSEQUENCE

    SEQUENCE elevator_door_alert 
        'someone has pushed or blocked door of elevator'
        CALL open_door
        CALL wait
    ENDSEQUENCE
ENDDEFINE

DEFINE Call_Button USING floor AND direction 
    floor:  floor,
    direction: direction,
    status: "IDLE" - 'initialize an upbutton object and set its status to idle

        SEQUENCE call_button_pushed USING elevator_list
            SET call_button status TO "ACTIVE" 'light of button comes on and stays on until elevator arrives'
            SET best_diff TO -1
            SET elevator_choice to "NULL"
            
            FOR elevator IN elevator_list 
                'first priority'
                IF elevator status is equal TO "IDLE" AND elevator floor is equal to call_button floor
                    SET elevator_choice TO elevator name 'not null - might need it later'
                    SET call_button status TO "IDLE"
                    CALL elevator stop
                ENDIF
                'second priority'
                IF elevator status is equal TO "UP" AND call_button direction is equal to "UP" AND elevator floor is less than call_button floor AND elevator_choice is equal TO "NULL"
                    SET diff TO call_button floor MINUS elevator florr 'set diff to positive integer'
                    IF best_diff is equal TO negative one OR best_diff is more than diff
                        SET best_diff TO diff
                        SET elevator_choice TO elevator name
                    ENDIF
                ENDIF

                IF elevator status is equal TO "DOWN" AND call_button direction is equal to "DOWN" AND elevator floor is more than call_button floor AND elevator_choice is equal TO "NULL"
                    SET diff TO elevator floor MINUS call_button floor'set diff to positive integer'
                    IF best_diff is equal TO negative one OR best_diff is more than diff
                        SET best_diff TO diff
                        SET elevator_choice TO elevator name
                    ENDIF
                ENDIF
            ENDFOR 'end iteration '
        
            IF elevator_choice is EQUAL TO "NULL" 'first two priorities failed - third priority is any idle elevator call - best_diff still equals -1'
                FOR elevator IN elevator_list  'iterate through elevators in elevator_list'        
                    IF elevator status is equal TO "IDLE" AND elevator floor is more than floor of call_button 
                        SET diff TO elevator floor MINUS call_button floor'set diff to positive integer'
                        IF best_diff is equal TO negative one OR best_diff is more than diff
                            SET best_diff TO diff
                            SET elevator_choice TO elevator name
                        ENDIF
                    ENDIF
                    IF elevator status is equal TO "IDLE" AND elevator floor is less than call_button floor
                        SET diff TO call_button floor MINUS elevator floor'set diff to positive integer'
                        IF best_diff is equal TO negative one OR best_diff is more than diff
                            SET best_diff TO diff
                            SET elevator_choice TO elevator name
                        ENDIF
                    ENDIF
                ENDFOR
            ENDIF

            IF elevator_choice is EQUAL TO "NULL" 'first three priorities failed 
                PUSH call_button floor TO column call_wait_list  
            ELSE 'one of the first three priorities passed, a elevator was chosen'
                FOR EACH elevator IN elevator_list 
                    IF elevator name is EQUAL TO elevator_choice
                        CALL elevator push_floor_list WITH call_button floor
                    ENDIF
                ENDFOR
            ENDIF
        ENDSEQUENCE
ENDDEFINE

DEFINE Request_Button USING floor 
    floor: floor,
    status: "IDLE"

    SEQUENCE request_button_pushed
        'TODO'
    ENDSEQUENCE
ENDDEFINE

DEFINE Door USING floor
    'TODO'
ENDDEFINE

DEFINE Edoor 
    'TODO'
ENDDEFINE
    
SET column1 TO INSTANTIATE Column WITH 10 AND 2 'creates a column named residential, with 10 floors, and 2 elevators'
CALL column1 SEQUENCE fill_elevator_list WITH column1 elevator_num
CALL column1 SEQUENCE fill_call_button_list WITH column1 floor_num


    
