type ClassicColumn struct {
	name                                   string
	origin, bottomfloor, topfloor, elevAmt int
	buttons                                []CallButton
	elevators                              []Elevator
}

func (c *ClassicColumn) MakeClassicColumn(name string, origin, bottomfloor, topfloor, elevAmt int) {
	c.name = name
	c.origin = origin
	c.bottomfloor = bottomfloor
	c.topfloor = topfloor
	c.elevAmt = elevAmt

	// Classic Column gets CallButtons with direction for each floor except origin
	// these buttons would represent a call to origin - would be at origin.
	// TODO - make sure the they go out when the elevator arrives, then open that elevator floordoor and deactivate the light, all fun stuff.
	if c.bottomfloor == c.origin {
		for i := bottomfloor; i <= topfloor; i++ {
			if i != topfloor {
				b := &CallButton{i, true, false}
				c.buttons = append(c.buttons, *b)
			}
			if i != bottomfloor {
				b := &CallButton{i, false, false}
				c.buttons = append(c.buttons, *b)
			}
	} // thats an easy classic elevator - but if the origin is not the bottom floor - uhg....
	if c.bottomfloor != c.origin {
		if c.bottomfloor < c.origin { // basement column add a button at the origin going down
			b := &CallButton{origin, false, false}
			c.buttons = append(c.buttons, *b)
			// and add a button at the top floor going up
			bup := &CallButton{origin, true, false}
			c.buttons = append(c.buttons, *b)
		}
		if c.bottomfloor < c.origin { // more than zero column 
			b := &CallButton{origin, true, false} // add a button at the origin going up
			c.buttons = append(c.buttons, *b)
			// and add a button at the top floor going down
			bup := &CallButton{c.bottomfloor, false, false}
			c.buttons = append(c.buttons, *b)
		}
	}
	// and lets not forget the elevators
	for i := 0; i < c.elevAmt; i++ {
		e := &Elevator{}
		s := strconv.Itoa(i + 1)
		e.ClassicElevator(c.bottomfloor, c.topfloor, c.origin, c.name+s)
		c.elevators = append(c.elevators, *e)
		fmt.Println("Added Elevator with name ", c.name+s)
		e.Display()
	}
}
